<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>得瑟侯</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://desehou.me/"/>
  <updated>2017-01-19T07:02:45.000Z</updated>
  <id>http://desehou.me/</id>
  
  <author>
    <name>Desehou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016年度总结</title>
    <link href="http://desehou.me/2017/01/19/2016%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://desehou.me/2017/01/19/2016年度总结/</id>
    <published>2017-01-19T06:24:57.000Z</published>
    <updated>2017-01-19T07:02:45.000Z</updated>
    
    <content type="html">&lt;p&gt;   2016年匆匆过去了，这一年是自己生命中重要的一年，这一年有两件喜事，入住新房和女儿彤彤出生。这一年中虽然很累，却收获满满。自己在这一年中，不管是生活中还是工作上都犯了很多错误，希望新的一年能够改进，快乐工作生活，努力为家人提供更好生活。&lt;br&gt;  一、生活中需要改进的地方：&lt;br&gt;   1.关于别人的私人事情不参与、不谈论&lt;br&gt;   2.不开别人玩笑，可自黑，不可黑他人&lt;br&gt;   3.多联系和关心家人&lt;br&gt;   4.减少不必要的消费&lt;br&gt;   5.加强运动，不过量饮酒&lt;br&gt;   6.尽量不在家里发脾气，如有发生，要第一时间认错&lt;br&gt;   7.控制自己的情绪，不要冲动&lt;br&gt;   8.去旅行&lt;br&gt;  二、工作中需要改进的地方：&lt;br&gt;   1.每天早晨规划当天工作计划，任务优先级&lt;br&gt;   2.保持记录工作日志，一个月更新4次以上blog&lt;br&gt;   3.使用swift开发一个新项目&lt;br&gt;   4.深入研究iOS底层原理，优化项目架构&lt;br&gt;   5.多投入业务时间学习&lt;br&gt;   6.多参与业内活动&lt;br&gt;   7.与同事沟通要换位思考，多顾及别人感受&lt;br&gt;   8.少说多做，为公司和领导解决问题&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   2016年匆匆过去了，这一年是自己生命中重要的一年，这一年有两件喜事，入住新房和女儿彤彤出生。这一年中虽然很累，却收获满满。自己在这一年中，不管是生活中还是工作上都犯了很多错误，希望新的一年能够改进，快乐工作生活，努力为家人提供更好生活。&lt;br&gt;  一、生活中需要改进
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS APP 启动原理</title>
    <link href="http://desehou.me/2016/08/26/iOS-APP-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://desehou.me/2016/08/26/iOS-APP-启动原理/</id>
    <published>2016-08-26T06:52:18.000Z</published>
    <updated>2016-08-26T07:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;一、app启动的大概过程&lt;br&gt;   1.main函数&lt;br&gt;   2.UIApplicationMain&lt;br&gt;     &lt;em&gt;创建UIApplication对象
     &lt;/em&gt;创建UIApplication的AppDelegate对象&lt;br&gt;   3.（未使用storyboard情况下）&lt;br&gt;     delegate对象开始处理监听系统事件&lt;br&gt;     &lt;em&gt;app启动结束的时候，调用AppDelegate的didFinishLaunchingWithOptions方法；
     &lt;/em&gt;在didFinishLaunchingWithOptions方法中创建UIWindow，创建rootViewController；&lt;br&gt;     &lt;em&gt;显示app界面&lt;br&gt;   3.（使用storyboard情况下）&lt;br&gt;      delegate对象开始处理监听系统事件
     &lt;/em&gt;根据info.plist获得要显示的storyboard，加载要显示的storyboard；&lt;br&gt;&lt;em&gt;创建UIwindow，创建rootViewController;
     &lt;/em&gt;显示app界面&lt;br&gt;二、app启动分析&lt;br&gt;   UIApplicationMain&lt;br&gt;   main函数中执行了一个UIApplicationMain这个函数&lt;br&gt;   intUIApplicationMain(int argc, char &lt;em&gt;argv[], NSString &lt;/em&gt;principalClassName, NSString *delegateClassName);&lt;br&gt;   argc、argv：直接传递给UIApplicationMain进行相关处理即可&lt;br&gt;   principalClassName：指定应用程序类名（app的象征），该类必须是UIApplication(或子类)。如果为nil,则用UIApplication类作为默认值&lt;br&gt;   delegateClassName：指定应用程序的代理类，该类必须遵守UIApplicationDelegate协议&lt;br&gt;   UIApplicationMain函数会根据principalClassName创建UIApplication对象，根据delegateClassName创建一个delegate对象，并将该delegate对象赋值给UIApplication对象中的delegate属性&lt;br&gt;   接着会建立应用程序的Main Runloop（事件循环），进行事件的处理(首先会在程序完毕后调用delegate对象的application:didFinishLaunchingWithOptions:方法)&lt;br&gt;    程序正常退出时UIApplicationMain函数才返回&lt;/p&gt;
&lt;p&gt;#import &lt;uikit uikit.h=&quot;&quot;&gt;&lt;/uikit&gt;&lt;/p&gt;
&lt;p&gt;#import “YYAppDelegate.h”&lt;/p&gt;
&lt;p&gt;int main(int argc, char &lt;em&gt; argv[])&lt;br&gt;{&lt;br&gt;@autoreleasepool {&lt;br&gt;// return UIApplicationMain(argc, argv, nil, NSStringFromClass([YYAppDelegate class]));&lt;br&gt;// return UIApplicationMain(argc, argv, @”UIApplication”, NSStringFromClass([YYAppDelegate class]));&lt;br&gt;/&lt;/em&gt;&lt;br&gt;argc: 系统或者用户传入的参数个数&lt;br&gt;argv: 系统或者用户传入的实际参数&lt;br&gt;1.根据传入的第三个参数创建UIApplication对象&lt;br&gt;2.根据传入的第四个产生创建UIApplication对象的代理&lt;br&gt;3.设置刚刚创建出来的代理对象为UIApplication的代理&lt;br&gt;4.开启一个事件循环&lt;br&gt;*/&lt;br&gt;return UIApplicationMain(argc, argv, @”UIApplication”, @”YYAppDelegate”);&lt;br&gt;}&lt;br&gt;}&lt;br&gt;系统入口的代码和参数说明：&lt;/p&gt;
&lt;p&gt;argc:系统或者用户传入的参数&lt;br&gt;argv:系统或用户传入的实际参数&lt;br&gt;1.根据传入的第三个参数，创建UIApplication对象&lt;br&gt;2.根据传入的第四个产生创建UIApplication对象的代理&lt;br&gt;3.设置刚刚创建出来的代理对象为UIApplication的代理&lt;br&gt;4.开启一个事件循环（可以理解为里面是一个死循环）这个时间循环是一个队列（先进先出）先添加进去的先处理&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一、app启动的大概过程&lt;br&gt;   1.main函数&lt;br&gt;   2.UIApplicationMain&lt;br&gt;     &lt;em&gt;创建UIApplication对象
     &lt;/em&gt;创建UIApplication的AppDelegate对象&lt;br&gt;   3.（未使用s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RunTime的理解与应用</title>
    <link href="http://desehou.me/2016/08/19/RunTime%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>http://desehou.me/2016/08/19/RunTime的理解与应用/</id>
    <published>2016-08-19T01:17:32.000Z</published>
    <updated>2016-08-26T06:43:04.000Z</updated>
    
    <content type="html">&lt;p&gt;RunTime在日常开发中不经常使用到，但是面试的时候经常被问到，下面是网上对RunTime的解释和在日常项目中对它的应用。&lt;/p&gt;
&lt;p&gt;//博客原文地址：&lt;a href=&quot;http://blog.csdn.net/a19860903/article/details/44853841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/a19860903/article/details/44853841&lt;/a&gt;&lt;br&gt;RunTime简称运行时。就是系统在运行的时候的一些机制，其中最主要的是消息机制。对于C语言，函数的调用在编译的时候会决定调用哪个函数（ C语言的函数调用请看这里 ）。编译完成之后直接顺序执行，无任何二义性。OC的函数调用成为消息发送。属于动态调用过程。在编译的时候并不能决定真正调用哪个函数（事实证明，在编 译阶段，OC可以调用任何函数，即使这个函数并未实现，只要申明过就不会报错。而C语言在编译阶段就会报错）。只有在真正运行的时候才会根据函数的名称找 到对应的函数来调用。&lt;br&gt;那OC是怎么实现动态调用的呢？下面我们来看看OC通过发送消息来达到动态调用的秘密。假&lt;/p&gt;
&lt;p&gt;如在OC中写了这样的一个代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[obj makeText];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中obj是一个对象，makeText是一个函数名称。对于这样一个简单的调用。在编译时RunTime会将上述代码转化成&lt;br&gt;    objc_msgSend(obj,@selector(makeText));&lt;br&gt;首先我们来看看obj这个对象，iOS中的obj都继承于NSObject。&lt;br&gt;   @interface NSObject &lt;nsobject&gt; {&lt;/nsobject&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Class isa  OBJC_ISA_AVAILABILITY;

}&amp;lt;/nsobject&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在NSObjcet中存在一个Class的isa指针。然后我们看看Class：&lt;br&gt;typedef struct objc_class *Class;&lt;/p&gt;
&lt;p&gt;struct objc_class {&lt;/p&gt;
&lt;p&gt;Class isa; // 指向metaclass&lt;/p&gt;
&lt;p&gt;Class super_class ; // 指向其父类&lt;/p&gt;
&lt;p&gt;const char *name ; // 类名&lt;/p&gt;
&lt;p&gt;long version ; // 类的版本信息，初始化默认为0，可以通过runtime函数class_setVersion和class_getVersion进行修改、读取&lt;/p&gt;
&lt;p&gt;long info; // 一些标识信息,如CLS_CLASS (0x1L) 表示该类为普通 class ，其中包含对象方法和成员变量;CLS_META (0x2L) 表示该类为 metaclass，其中包含类方法;&lt;/p&gt;
&lt;p&gt;long instance_size ; // 该类的实例变量大小(包括从父类继承下来的实例变量);&lt;/p&gt;
&lt;p&gt;struct objc_ivar_list *ivars; // 用于存储每个成员变量的地址&lt;/p&gt;
&lt;p&gt;struct objc_method_list **methodLists ; // 与 info 的一些标志位有关,如CLS_CLASS (0x1L),则存储对象方法，如CLS_META (0x2L)，则存储类方法;&lt;/p&gt;
&lt;p&gt;struct objc_cache *cache; // 指向最近使用的方法的指针，用于提升效率；&lt;/p&gt;
&lt;p&gt;struct objc_protocol_list *protocols; // 存储该类遵守的协议&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;我们可以看到，对于一个Class类中，存在很多东西，下面我来一一解释一下：&lt;/p&gt;
&lt;p&gt;Class isa：指向metaclass，也就是静态的Class。一般一个Obj对象中的isa会指向普通的Class，这个Class中存储普通成员变量和对 象方法（“-”开头的方法），普通Class中的isa指针指向静态Class，静态Class中存储static类型成员变量和类方法（“+”开头的方 法）。&lt;/p&gt;
&lt;p&gt;Class super_class:指向父类，如果这个类是根类，则为NULL。&lt;/p&gt;
&lt;p&gt;下面一张图片很好的描述了类和对象的继承关系：&lt;br&gt;&lt;img src=&quot;http://www.cocos.com/uploads/20141018/1413628797629491.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;注意：所有metaclass中isa指针都指向跟metaclass。而跟metaclass则指向自身。Root metaclass是通过继承Root class产生的。与root class结构体成员一致，也就是前面提到的结构。不同的是Root metaclass的isa指针指向自身。&lt;/p&gt;
&lt;p&gt;Class类中其他的成员这里就先不做过多解释了，下面我们来看看：&lt;/p&gt;
&lt;p&gt;@selector (makeText)：这是一个SEL方法选择器。SEL其主要作用是快速的通过方法名字（makeText）查找到对应方法的函数指针，然后调用其函 数。SEL其本身是一个Int类型的一个地址，地址中存放着方法的名字。对于一个类中。每一个方法对应着一个SEL。所以iOS类中不能存在2个名称相同 的方法，即使参数类型不同，因为SEL是根据方法名字生成的，相同的方法名称只能对应一个SEL。&lt;/p&gt;
&lt;p&gt;下面我们就来看看具体消息发送之后是怎么来动态查找对应的方法的。&lt;/p&gt;
&lt;p&gt;首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method（猜测cache中method列表是以SEL为key通过hash表来存储的，这样能提高函数查找速度），若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。&lt;/p&gt;
&lt;p&gt;//博客原文地址：&lt;a href=&quot;http://www.jianshu.com/p/927c8384855a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/927c8384855a&lt;/a&gt;&lt;br&gt;什么是Runtime&lt;br&gt;我们写的代码在程序运行过程中都会被转化成runtime的C代码执行，例如[target doSomething];会被转化成objc_msgSend(target, @selector(doSomething));。&lt;br&gt;OC中一切都被设计成了对象，我们都知道一个类被初始化成一个实例，这个实例是一个对象。实际上一个类本质上也是一个对象，在runtime中用结构体表示。&lt;br&gt;相关的定义：&lt;/p&gt;
&lt;p&gt;/// 描述类中的一个方法&lt;br&gt;typedef struct objc_method *Method;&lt;/p&gt;
&lt;p&gt;/// 实例变量&lt;br&gt;typedef struct objc_ivar *Ivar;&lt;/p&gt;
&lt;p&gt;/// 类别Category&lt;br&gt;typedef struct objc_category *Category;&lt;/p&gt;
&lt;p&gt;/// 类中声明的属性&lt;br&gt;typedef struct objc_property &lt;em&gt;objc_property_t;
&lt;/em&gt;类在runtime中的表示&lt;br&gt;//类在runtime中的表示&lt;br&gt;struct objc_class {&lt;br&gt;Class isa;//指针，顾名思义，表示是一个什么，&lt;br&gt;//实例的isa指向类对象，类对象的isa指向元类&lt;/p&gt;
&lt;p&gt;#if !&lt;strong&gt;OBJC2&lt;/strong&gt;&lt;br&gt;Class super_class;  //指向父类&lt;br&gt;const char &lt;em&gt;name;  //类名&lt;br&gt;long version;&lt;br&gt;long info;&lt;br&gt;long instance_size&lt;br&gt;struct objc_ivar_list &lt;/em&gt;ivars //成员变量列表&lt;br&gt;struct objc_method_list &lt;em&gt;*methodLists; //方法列表&lt;br&gt;struct objc_cache &lt;/em&gt;cache;//缓存&lt;br&gt;//一种优化，调用过的方法存入缓存列表，下次调用先找缓存&lt;br&gt;struct objc_protocol_list *protocols //协议列表&lt;/p&gt;
&lt;p&gt;#endif&lt;br&gt;} OBJC2_UNAVAILABLE;&lt;br&gt;/&lt;em&gt; Use &lt;code&gt;Class&lt;/code&gt; instead of `struct objc_class &lt;/em&gt;` &lt;em&gt;/&lt;br&gt;获取列表&lt;br&gt;有时候会有这样的需求，我们需要知道当前类中每个属性的名字（比如字典转模型，字典的Key和模型对象的属性名字不匹配）。&lt;br&gt;我们可以通过runtime的一系列方法获取类的一些信息（包括属性列表，方法列表，成员变量列表，和遵循的协议列表）。&lt;br&gt;unsigned int count;&lt;br&gt;//获取属性列表&lt;br&gt;objc_property_t &lt;/em&gt;propertyList = class_copyPropertyList([self class], &amp;amp;count);&lt;br&gt;for (unsigned int i=0; i&amp;lt;count; i++) {&lt;br&gt;const char *propertyName = property_getName(propertyList[i]);&lt;br&gt;NSLog(@”property—-&amp;gt;%@”, [NSString stringWithUTF8String:propertyName]);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;//获取方法列表&lt;br&gt;Method *methodList = class_copyMethodList([self class], &amp;amp;count);&lt;br&gt;for (unsigned int i; i&amp;lt;count; i++) {&lt;br&gt;Method method = methodList[i];&lt;br&gt;NSLog(@”method—-&amp;gt;%@”, NSStringFromSelector(method_getName(method)));&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;//获取成员变量列表&lt;br&gt;Ivar &lt;em&gt;ivarList = class_copyIvarList([self class], &amp;amp;count);&lt;br&gt;for (unsigned int i; i&amp;lt;count; i++) {&lt;br&gt;Ivar myIvar = ivarList[i];&lt;br&gt;const char &lt;/em&gt;ivarName = ivar_getName(myIvar);&lt;br&gt;NSLog(@”Ivar—-&amp;gt;%@”, [NSString stringWithUTF8String:ivarName]);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;//获取协议列表&lt;br&gt;__unsafe_unretained Protocol &lt;em&gt;*protocolList = class_copyProtocolList([self class], &amp;amp;count);&lt;br&gt;for (unsigned int i; i&amp;lt;count; i++) {&lt;br&gt;Protocol &lt;/em&gt;myProtocal = protocolList[i];&lt;br&gt;const char *protocolName = protocol_getName(myProtocal);&lt;br&gt;NSLog(@”protocol—-&amp;gt;%@”, [NSString stringWithUTF8String:protocolName]);&lt;br&gt;}&lt;br&gt;在Xcode上跑一下看看输出吧，需要给你当前的类写几个属性，成员变量，方法和协议，不然获取的列表是没有东西的。&lt;br&gt;注意，调用这些获取列表的方法别忘记导入头文件#import &lt;objc runtime.h=&quot;&quot;&gt;。&lt;/objc&gt;&lt;/p&gt;
&lt;p&gt;方法调用&lt;br&gt;让我们看一下方法调用在运行时的过程（参照前文类在runtime中的表示）&lt;/p&gt;
&lt;p&gt;如果用实例对象调用实例方法，会到实例的isa指针指向的对象（也就是类对象）操作。&lt;br&gt;如果调用的是类方法，就会到类对象的isa指针指向的对象（也就是元类对象）中操作。&lt;/p&gt;
&lt;p&gt;首先，在相应操作的对象中的缓存方法列表中找调用的方法，如果找到，转向相应实现并执行。&lt;br&gt;如果没找到，在相应操作的对象中的方法列表中找调用的方法，如果找到，转向相应实现执行&lt;br&gt;如果没找到，去父类指针所指向的对象中执行1，2.&lt;br&gt;以此类推，如果一直到根类还没找到，转向拦截调用。&lt;br&gt;如果没有重写拦截调用的方法，程序报错。&lt;br&gt;以上的过程给我带来的启发：&lt;/p&gt;
&lt;p&gt;重写父类的方法，并没有覆盖掉父类的方法，只是在当前类对象中找到了这个方法后就不会再去父类中找了。&lt;br&gt;如果想调用已经重写过的方法的父类的实现，只需使用super这个编译器标识，它会在运行时跳过在当前的类对象中寻找方法的过程。&lt;br&gt;拦截调用&lt;br&gt;在方法调用中说到了，如果没有找到方法就会转向拦截调用。&lt;br&gt;那么什么是拦截调用呢。&lt;br&gt;拦截调用就是，在找不到调用的方法程序崩溃之前，你有机会通过重写NSObject的四个方法来处理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(BOOL)resolveClassMethod:(SEL)sel;&lt;/li&gt;
&lt;li&gt;(BOOL)resolveInstanceMethod:(SEL)sel;&lt;br&gt;//后两个方法需要转发到其他的类处理&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;(id)forwardingTargetForSelector:(SEL)aSelector;&lt;/li&gt;
&lt;li&gt;(void)forwardInvocation:(NSInvocation *)anInvocation;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个方法是当你调用一个不存在的类方法的时候，会调用这个方法，默认返回NO，你可以加上自己的处理然后返回YES。&lt;br&gt;第二个方法和第一个方法相似，只不过处理的是实例方法。&lt;br&gt;第三个方法是将你调用的不存在的方法重定向到一个其他声明了这个方法的类，只需要你返回一个有这个方法的target。&lt;br&gt;第四个方法是将你调用的不存在的方法打包成NSInvocation传给你。做完你自己的处理后，调用invokeWithTarget:方法让某个target触发这个方法。&lt;br&gt;动态添加方法&lt;br&gt;重写了拦截调用的方法并且返回了YES，我们要怎么处理呢？&lt;br&gt;有一个办法是根据传进来的SEL类型的selector动态添加一个方法。&lt;/p&gt;
&lt;p&gt;首先从外部隐式调用一个不存在的方法：&lt;/p&gt;
&lt;p&gt;//隐式调用方法&lt;br&gt;[target performSelector:@selector(resolveAdd:) withObject:@”test”];&lt;br&gt;然后，在target对象内部重写拦截调用的方法，动态添加方法。&lt;br&gt;void runAddMethod(id self, SEL _cmd, NSString *string){&lt;br&gt;NSLog(@”add C IMP “, string);&lt;br&gt;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(BOOL)resolveInstanceMethod:(SEL)sel{&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//给本类动态添加一个方法&lt;br&gt;if ([NSStringFromSelector(sel) isEqualToString:@”resolveAdd:”]) {&lt;br&gt;class_addMethod(self, sel, (IMP)runAddMethod, “v@:*”);&lt;br&gt;}&lt;br&gt;return YES;&lt;br&gt;}&lt;br&gt;其中class_addMethod的四个参数分别是：&lt;/p&gt;
&lt;p&gt;Class cls 给哪个类添加方法，本例中是self&lt;br&gt;SEL name 添加的方法，本例中是重写的拦截调用传进来的selector。&lt;br&gt;IMP imp 方法的实现，C方法的方法实现可以直接获得。如果是OC方法，可以用+ (IMP)instanceMethodForSelector:(SEL)aSelector;获得方法的实现。&lt;br&gt;“v@:*”方法的签名，代表有一个参数的方法。&lt;br&gt;关联对象&lt;br&gt;现在你准备用一个系统的类，但是系统的类并不能满足你的需求，你需要额外添加一个属性。&lt;br&gt;这种情况的一般解决办法就是继承。&lt;br&gt;但是，只增加一个属性，就去继承一个类，总是觉得太麻烦类。&lt;br&gt;这个时候，runtime的关联属性就发挥它的作用了。&lt;/p&gt;
&lt;p&gt;//首先定义一个全局变量，用它的地址作为关联对象的key&lt;br&gt;static char associatedObjectKey;&lt;br&gt;//设置关联对象&lt;br&gt;objc_setAssociatedObject(target, &amp;amp;associatedObjectKey, @”添加的字符串属性”, OBJC_ASSOCIATION_RETAIN_NONATOMIC); //获取关联对象&lt;br&gt;NSString *string = objc_getAssociatedObject(target, &amp;amp;associatedObjectKey);&lt;br&gt;NSLog(@”AssociatedObject = %@”, string);&lt;/p&gt;
&lt;p&gt;objc_setAssociatedObject的四个参数：&lt;/p&gt;
&lt;p&gt;id object给谁设置关联对象。&lt;br&gt;const void *key关联对象唯一的key，获取时会用到。&lt;br&gt;id value关联对象。&lt;br&gt;objc_AssociationPolicy关联策略，有以下几种策略：&lt;/p&gt;
&lt;p&gt;enum {&lt;br&gt;OBJC_ASSOCIATION_ASSIGN = 0,&lt;br&gt;OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,&lt;br&gt;OBJC_ASSOCIATION_COPY_NONATOMIC = 3,&lt;br&gt;OBJC_ASSOCIATION_RETAIN = 01401,&lt;br&gt;OBJC_ASSOCIATION_COPY = 01403&lt;br&gt;};&lt;br&gt;如果你熟悉OC，看名字应该知道这几种策略的意思了吧。&lt;/p&gt;
&lt;p&gt;objc_getAssociatedObject的两个参数。&lt;/p&gt;
&lt;p&gt;id object获取谁的关联对象。&lt;br&gt;const void *key根据这个唯一的key获取关联对象。&lt;br&gt;其实，你还可以把添加和获取关联对象的方法写在你需要用到这个功能的类的类别中，方便使用。&lt;/p&gt;
&lt;p&gt;//添加关联对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)addAssociatedObject:(id)object{&lt;br&gt;objc_setAssociatedObject(self, @selector(getAssociatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);&lt;br&gt;}&lt;br&gt;//获取关联对象&lt;/li&gt;
&lt;li&gt;(id)getAssociatedObject{&lt;br&gt;return objc_getAssociatedObject(self, _cmd);&lt;br&gt;}&lt;br&gt;注意：这里面我们把getAssociatedObject方法的地址作为唯一的key，_cmd代表当前调用方法的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法交换&lt;br&gt;方法交换，顾名思义，就是将两个方法的实现交换。例如，将A方法和B方法交换，调用A方法的时候，就会执行B方法中的代码，反之亦然。&lt;br&gt;话不多说，这是参考Mattt大神在NSHipster上的文章自己写的代码。&lt;/p&gt;
&lt;p&gt;#import “UIViewController+swizzling.h”&lt;/p&gt;
&lt;p&gt;#import &lt;objc runtime.h=&quot;&quot;&gt;&lt;/objc&gt;&lt;/p&gt;
&lt;p&gt;@implementation UIViewController (swizzling)&lt;/p&gt;
&lt;p&gt;//load方法会在类第一次加载的时候被调用&lt;br&gt;//调用的时间比较靠前，适合在这个方法里做方法交换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)load{&lt;br&gt;//方法交换应该被保证，在程序中只会执行一次&lt;br&gt;static dispatch_once_t onceToken;&lt;br&gt;dispatch_once(&amp;amp;onceToken, ^{&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//获得viewController的生命周期方法的selector&lt;br&gt;SEL systemSel = @selector(viewWillAppear:);&lt;br&gt;//自己实现的将要被交换的方法的selector&lt;br&gt;SEL swizzSel = @selector(swiz_viewWillAppear:);&lt;br&gt;//两个方法的Method&lt;br&gt;Method systemMethod = class_getInstanceMethod([self class], systemSel);&lt;br&gt;Method swizzMethod = class_getInstanceMethod([self class], swizzSel);&lt;/p&gt;
&lt;p&gt;//首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败&lt;br&gt;BOOL isAdd = class_addMethod(self, systemSel, method_getImplementation(swizzMethod), method_getTypeEncoding(swizzMethod));&lt;br&gt;if (isAdd) {&lt;br&gt;//如果成功，说明类中不存在这个方法的实现&lt;br&gt;//将被交换方法的实现替换到这个并不存在的实现&lt;br&gt;class_replaceMethod(self, swizzSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));&lt;br&gt;}else{&lt;br&gt;//否则，交换两个方法的实现&lt;br&gt;method_exchangeImplementations(systemMethod, swizzMethod);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;});&lt;br&gt;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)swiz_viewWillAppear:(BOOL)animated{&lt;br&gt;//这时候调用自己，看起来像是死循环&lt;br&gt;//但是其实自己的实现已经被替换了&lt;br&gt;[self swiz_viewWillAppear:animated];&lt;br&gt;NSLog(@”swizzle”);&lt;br&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@end&lt;br&gt;在一个自己定义的viewController中重写viewWillAppear&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(void)viewWillAppear:(BOOL)animated{&lt;br&gt;[super viewWillAppear:animated];&lt;br&gt;NSLog(@”viewWillAppear”);&lt;br&gt;}&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;RunTime在日常开发中不经常使用到，但是面试的时候经常被问到，下面是网上对RunTime的解释和在日常项目中对它的应用。&lt;/p&gt;
&lt;p&gt;//博客原文地址：&lt;a href=&quot;http://blog.csdn.net/a19860903/article/details/44
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用的本地保存数据的几种方式</title>
    <link href="http://desehou.me/2016/07/29/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://desehou.me/2016/07/29/常用的本地保存数据的几种方式/</id>
    <published>2016-07-29T01:53:05.000Z</published>
    <updated>2016-07-29T01:57:53.000Z</updated>
    
    <content type="html">&lt;p&gt;在iOS开发过程中，不管是做什么应用，都会碰到数据保存的问题。将数据保存到本地，能够让程序的运行更加流畅，节省用户流量，减少不必要的网络请求，使得用户体验更好。下面介绍一下数据保存的方式：&lt;br&gt;1.NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵守NSCoding协议，并且该对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。前一个方法告诉系统怎么对对象进行编码，而后一个方法则是告诉系统怎么对对象进行解码。例如对Possession对象归档保存。&lt;br&gt;定义Possession：&lt;br&gt;@interface Possession：NSObject&lt;nscoding&gt;{//遵守NSCoding协议&lt;br&gt;NSString &lt;em&gt;name;//待归档类型&lt;br&gt;}&lt;br&gt;@implementation Possession&lt;br&gt;-(void)encodeWithCoder:(NSCoder &lt;/em&gt;)aCoder{&lt;br&gt;[aCoder encodeObject:name forKey:@”name”];&lt;br&gt;}&lt;br&gt;-(void)initWithCoder:(NSCoder *)aDecoder{&lt;br&gt;name=[[aDeCoder decodeObjectforKey:@”name”] retain];&lt;br&gt;}&lt;br&gt;归档操作：&lt;br&gt;如果对Possession对象allPossession归档保存，只需要NSCoder子类NSKeyedArchiver的方法archiveRootObject:toFile: 即可。&lt;/nscoding&gt;&lt;/p&gt;
&lt;p&gt;NSString *path = [self possessionArchivePath];&lt;br&gt;[NSKeyedArchiver archiveRootObject:allPossessions toFile: path ]&lt;br&gt;解压操作：&lt;/p&gt;
&lt;p&gt;同样调用NSCoder子类NSKeyedArchiver的方法unarchiveRootObject:toFile: 即可&lt;br&gt;allPossessions = [[NSKeyedUnarchiver unarchiveObjectWithFile:path] retain];&lt;/p&gt;
&lt;p&gt;缺点：归档的形式来保存数据，只能一次性归档保存以及一次性解压。所以只能针对小量数据，而且对数据操作比较笨拙，即如果想改动数据的某一小部分，还是需要解压整个数据或者归档整个数据。&lt;br&gt;2.NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。如果要存储其他类型，则需要转换为前面的类型，才能用NSUserDefaults存储。具体实现为：&lt;br&gt;保存数据：&lt;br&gt;NSUserDefaults &lt;em&gt;defaults =[NSUserDefaults standardUserDefaults];&lt;br&gt;NSString &lt;/em&gt;name =@”default string“;&lt;br&gt;[defaults setObject:firstName forKey:@”name”];&lt;br&gt;//获得UIImage实例&lt;/p&gt;
&lt;p&gt;UIImage *image=[[UIImage alloc]initWithContentsOfFile:@”photo.jpg”];&lt;/p&gt;
&lt;p&gt;NSData *imageData = UIImageJPEGRepresentation(image, 100);//UIImage对象转换成NSData&lt;/p&gt;
&lt;p&gt;[defaults synchronize];//用synchronize方法把数据持久化到standardUserDefaults数据库&lt;br&gt;读取数据：&lt;/p&gt;
&lt;p&gt;NSUserDefaults &lt;em&gt;defaults =[NSUserDefaults standardUserDefaults];&lt;br&gt;NSString &lt;/em&gt;name = [defaults objectForKey:@”name”];//根据键值取出name&lt;br&gt;NSData &lt;em&gt;imageData = [defaults dataForKey:@”image”];&lt;br&gt;UIImage &lt;/em&gt;Image = [UIImage imageWithData:imageData];//NSData转换为UIImage&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write写入方式：永久保存在磁盘中。具体方法为：&lt;br&gt;第一步：获得文件即将保存的路径：&lt;br&gt;NSArray &lt;em&gt;documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,  NSUserDomainMask,YES);//使用C函数NSSearchPathForDirectoriesInDomains来获得沙盒中目录的全路径。该函数有三个参数，目录类型、he domain mask、布尔值。其中布尔值表示是否需要通过～扩展路径。而且第一个参数是不变的，即为NSSearchPathDirectory 。在IOS中后两个参数也是不变的，即为：NSUserDomainMask 和 YES。&lt;br&gt;NSString &lt;/em&gt;ourDocumentPath =[documentPaths objectAtIndex:0];&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有一种方法是使用NSHomeDirectory函数获得sandbox的路径。具体的用法为：&lt;/p&gt;
&lt;p&gt;NSString &lt;em&gt;sandboxPath = NSHomeDirectory();&lt;br&gt;// Once you have the full sandbox path, you can create a path from it，但是不能在sandbox的本文件层上写文件也不能创建目录，而应该是此基础上创建一个新的可写的目录，例如Documents,Library或者temp。&lt;br&gt;NSString &lt;/em&gt;documentPath = [sandboxPath&lt;br&gt;stringByAppendingPathComponent:@”Documents”];//将Documents添加到sandbox路径上，具体原因前面分析了！&lt;br&gt;这两者的区别就是：使用NSSearchPathForDirectoriesInDomains比在NSHomeDirectory后面添加Document更加安全。因为该文件目录可能在未来发送的系统上发生改变。&lt;/p&gt;
&lt;p&gt;第二步：生成在该路径下的文件：&lt;br&gt;NSString *FileName=[documentDirectory stringByAppendingPathComponent:fileName];//fileName就是保存文件的文件名&lt;br&gt;第三步：往文件中写入数据：&lt;br&gt;[data writeToFile:FileName atomically:YES];//将NSData类型对象data写入文件，文件名为FileName&lt;/p&gt;
&lt;p&gt;最后：从文件中读出数据：&lt;/p&gt;
&lt;p&gt;NSData data=[NSData dataWithContentsOfFile:FileName options:0 error:NULL];//从FileName中读取出数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。还是一步步来吧！&lt;br&gt;第一步：需要添加SQLite相关的库以及头文件：在项目文件的Build Phases下，找到Link Binary Library(ies)，添加libsqlite3.0.dylib（libsqlite3.dylib与前者的区别暂时不知，两者应该差不多）；在项目文件中头文件或者源文件中添加头文件#import “/usr/include/sqlite3.h”&lt;br&gt;第二步：开始使用SQLite：&lt;br&gt;NSArray &lt;em&gt;documentsPaths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask , YES);&lt;br&gt;NSString &lt;/em&gt;databaseFilePath=[[documentsPaths objectAtIndex:0] stringByAppendingPathComponent:@”mydb”];&lt;br&gt;//上面两句已经比较熟悉了吧！&lt;br&gt;//打开数据库&lt;br&gt;if (sqlite3_open([databaseFilePath UTF8String], &amp;amp;database)==SQLITE_OK) {&lt;br&gt;NSLog(@”sqlite dadabase is opened.”);&lt;br&gt;}&lt;br&gt;else{ return;}//打开不成功就返回&lt;br&gt;在打开了数据库的前提下，如果数据库没有表，那就开始建表了哦！&lt;br&gt;char &lt;em&gt;error;&lt;br&gt;const char &lt;/em&gt;createSql=”create table(id integer primary key autoincrement, name text)”;&lt;br&gt;if (sqlite3_exec(database, createSql, NULL, NULL, &amp;amp;error)==SQLITE_OK) {&lt;br&gt;NSLog(@”create table is ok.”);&lt;br&gt;}&lt;br&gt;else&lt;br&gt;{&lt;br&gt;NSLog(@”error: %s”,error);&lt;br&gt;sqlite3_free(error);//每次使用完毕清空error字符串，提供给下一次使用&lt;br&gt;}&lt;br&gt;建表完成之后，就开始插入记录：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;const char *insertSql=”insert into a person (name) values(‘gg’)”;&lt;br&gt;if (sqlite3_exec(database, insertSql, NULL, NULL, &amp;amp;error)==SQLITE_OK) {&lt;br&gt;NSLog(@”insert operation is ok.”);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;else&lt;br&gt;{&lt;br&gt;NSLog(@”error: %s”,error);&lt;br&gt;sqlite3_free(error);//每次使用完毕清空error字符串，提供给下一次使用&lt;br&gt;}&lt;br&gt;下一步，查询记录：&lt;/p&gt;
&lt;p&gt;const char &lt;em&gt;selectSql=”select id,name from a person”;&lt;br&gt;sqlite3_stmt &lt;/em&gt;statement;&lt;br&gt;if (sqlite3_prepare_v2(database,selectSql, -1, &amp;amp;statement, nil)==SQLITE_OK) {&lt;br&gt;NSLog(@”select operation is ok.”);&lt;br&gt;}&lt;br&gt;else&lt;br&gt;{&lt;br&gt;NSLog(@”error: %s”,error);&lt;br&gt;sqlite3_free(error);&lt;br&gt;}&lt;br&gt;while(sqlite3_step(statement)==SQLITE_ROW) {&lt;br&gt;int _id=sqlite3_column_int(statement, 0);&lt;br&gt;NSString &lt;em&gt;name=(char&lt;/em&gt;)sqlite3_column_text(statement, 1);&lt;br&gt;NSLog(@”row&amp;gt;&amp;gt;id %i, name %s”,_id,name);&lt;br&gt;}&lt;br&gt;sqlite3_finalize(statement);&lt;/p&gt;
&lt;p&gt;最后，关闭数据库：&lt;/p&gt;
&lt;p&gt;sqlite3_close(database);&lt;br&gt;注意：写入数据库，字符串可以采用char方式，而从数据库中取出char类型，当char类型有表示中文字符时，会出现乱码。这是因为数据库默认使用ascII编码方式。所以要想正确从数据库中取出中文，需要用NSString来接收从数据库取出的字符串。&lt;br&gt;   我最喜欢用的是NSUserDefaults和本地文件Plist方式，用NSUserDefaults来存储一些加密过的用户信息，比如账号密码啥的，用Plist来存储一些用户收藏的信息等一些暂时需要缓存的数据。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS开发过程中，不管是做什么应用，都会碰到数据保存的问题。将数据保存到本地，能够让程序的运行更加流畅，节省用户流量，减少不必要的网络请求，使得用户体验更好。下面介绍一下数据保存的方式：&lt;br&gt;1.NSKeyedArchiver：采用归档的形式来保存数据，该数据对象需要遵
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx接口数据返回的坑</title>
    <link href="http://desehou.me/2016/07/08/nginx%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E7%9A%84%E5%9D%91/"/>
    <id>http://desehou.me/2016/07/08/nginx接口数据返回的坑/</id>
    <published>2016-07-08T01:36:54.000Z</published>
    <updated>2016-07-08T03:15:41.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;项目开发结束，按照计划上了预演环境，测试部的小伙伴在测试中发现有一个功能返回数据出错，android版本和iOS版本一样。项目上线在即怎么出了这样的问题，我们app开发的小伙伴首先怀疑是服务端接口有问题，服务端小伙伴用浏览器工具调试发现接口正常，并且该接口是post方式，长度应该绝对够用的。经过断点排查发现，返回是有数据的，但是数据是非正常的json格式，被截断了。
  是被谁截断了呢？
  我开始怀疑是afnetworking框架截断了，网上查了一通，也没找到原因。偶然在打断点的过程中看到了nginx字样，瞬间怀疑nginx截断了数据。google一下发现大量数据过长被nginx截断的文章。
  fastcgi_buffers      8 4K;
  fastcgi_buffer_size  4K;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fastcgi_buffers 控制 nginx 最多创建 8 个大小为 4K 的缓冲区，而 fastcgi_buffer_size 则是处理 Response 时第一个缓冲区的大小，不包含在前者中。所以总计能创建的最大内存缓冲区大小是 8&lt;em&gt;4K+4K = 36k。而这些缓冲区是根据实际的 Response 大小动态生成的，并不是一次性创建的。比如一个 8K 的页面，Nginx 会创建 2&lt;/em&gt;4K 共 2 个 buffers。&lt;/p&gt;
&lt;p&gt;当 Response 小于等于 36k 时，所有数据当然全部在内存中处理。如果 Response 大于 36k 呢？fastcgi_temp 的作用就在于此。多出来的数据会被临时写入到文件中，放在这个目录下面。&lt;/p&gt;
&lt;p&gt;内存中缓冲了 36Kb，剩下的会写入的文件中。而实际的情况是，运行 Nginx Process 的用户并没有 fastcgi_temp 目录的写权限，于是剩下的数据就丢失掉了。&lt;br&gt;   所以nginx要给这个目录的读写权限，并且将nginx改为root用户。&lt;br&gt;   重新请求正常。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;项目开发结束，按照计划上了预演环境，测试部的小伙伴在测试中发现有一个功能返回数据出错，android版本和iOS版本一样。项目上线在即怎么出了这样的问题，我们app开发的小伙伴首先怀疑是服务端接口有问题，服务端小伙伴用浏览器工具调试发现接口正常，并且该接口是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭建遇到的坑</title>
    <link href="http://desehou.me/2016/07/07/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://desehou.me/2016/07/07/hexo博客搭建遇到的坑/</id>
    <published>2016-07-07T07:42:15.000Z</published>
    <updated>2016-07-07T08:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;   之前自己的博客在CSDN，已经好久没有更新维护，最近项目告一段落，打算在github上搭建一个技术博客，查了很多资料，选中了hexo，经过一下午的折腾终于成功，第一篇文章就总结下自己搭建hexo过程中遇到的坑吧。&lt;/p&gt;
&lt;p&gt;坑1：hexo不能push到github上&lt;br&gt;    hexo安装资料：&lt;br&gt;    &lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/465830080ea9&lt;/a&gt;&lt;br&gt;    自己按照上述资料安装，发现死活不能deploy到github，折腾了好久，甚至重新删除安装还是不行，后来发现原因，原来是type参数和值中间必须要有空格，而那个教程中却是没有空格的，并且hexo的官方文档里着重强调必须要注意空格问题。看来是自己不仔细看官方文档的后果。&lt;br&gt;     type: git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo: https://github.com/leopardpan/leopardpan.github.io.git

branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;坑2：注意站点_config.yml和theme _config.yml&lt;br&gt;    hexo部署成功，自己感觉主题太丑了，想换个主题，换了主题之后不管自己如何设置头像就是不能设置成功，后来发现原因，有的主题换头像实在站点的_config.yml中添加avatar字段和头像地址，而有的头像则是在主题目录下的_config.yml中进行配置，这点一定要注意，仔细查看所用主题的文档说明。&lt;br&gt;坑3: 自己的域名指向github.io不成功&lt;br&gt;     自己在修改过_config.yml之后，会执行hexo c，hexo g,hexo d命令，导致原本在github上的CNAME文件被删除，域名指向不成功。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   之前自己的博客在CSDN，已经好久没有更新维护，最近项目告一段落，打算在github上搭建一个技术博客，查了很多资料，选中了hexo，经过一下午的折腾终于成功，第一篇文章就总结下自己搭建hexo过程中遇到的坑吧。&lt;/p&gt;
&lt;p&gt;坑1：hexo不能push到github
    
    </summary>
    
    
  </entry>
  
</feed>
