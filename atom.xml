<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>得瑟侯</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://desehou.me/"/>
  <updated>2016-07-08T03:15:41.000Z</updated>
  <id>http://desehou.me/</id>
  
  <author>
    <name>Desehou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx接口数据返回的坑</title>
    <link href="http://desehou.me/2016/07/08/nginx%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E7%9A%84%E5%9D%91/"/>
    <id>http://desehou.me/2016/07/08/nginx接口数据返回的坑/</id>
    <published>2016-07-08T01:36:54.000Z</published>
    <updated>2016-07-08T03:15:41.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;项目开发结束，按照计划上了预演环境，测试部的小伙伴在测试中发现有一个功能返回数据出错，android版本和iOS版本一样。项目上线在即怎么出了这样的问题，我们app开发的小伙伴首先怀疑是服务端接口有问题，服务端小伙伴用浏览器工具调试发现接口正常，并且该接口是post方式，长度应该绝对够用的。经过断点排查发现，返回是有数据的，但是数据是非正常的json格式，被截断了。
  是被谁截断了呢？
  我开始怀疑是afnetworking框架截断了，网上查了一通，也没找到原因。偶然在打断点的过程中看到了nginx字样，瞬间怀疑nginx截断了数据。google一下发现大量数据过长被nginx截断的文章。
  fastcgi_buffers      8 4K;
  fastcgi_buffer_size  4K;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fastcgi_buffers 控制 nginx 最多创建 8 个大小为 4K 的缓冲区，而 fastcgi_buffer_size 则是处理 Response 时第一个缓冲区的大小，不包含在前者中。所以总计能创建的最大内存缓冲区大小是 8&lt;em&gt;4K+4K = 36k。而这些缓冲区是根据实际的 Response 大小动态生成的，并不是一次性创建的。比如一个 8K 的页面，Nginx 会创建 2&lt;/em&gt;4K 共 2 个 buffers。&lt;/p&gt;
&lt;p&gt;当 Response 小于等于 36k 时，所有数据当然全部在内存中处理。如果 Response 大于 36k 呢？fastcgi_temp 的作用就在于此。多出来的数据会被临时写入到文件中，放在这个目录下面。&lt;/p&gt;
&lt;p&gt;内存中缓冲了 36Kb，剩下的会写入的文件中。而实际的情况是，运行 Nginx Process 的用户并没有 fastcgi_temp 目录的写权限，于是剩下的数据就丢失掉了。&lt;br&gt;   所以nginx要给这个目录的读写权限，并且将nginx改为root用户。&lt;br&gt;   重新请求正常。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;项目开发结束，按照计划上了预演环境，测试部的小伙伴在测试中发现有一个功能返回数据出错，android版本和iOS版本一样。项目上线在即怎么出了这样的问题，我们app开发的小伙伴首先怀疑是服务端接口有问题，服务端小伙伴用浏览器工具调试发现接口正常，并且该接口是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭建遇到的坑</title>
    <link href="http://desehou.me/2016/07/07/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://desehou.me/2016/07/07/hexo博客搭建遇到的坑/</id>
    <published>2016-07-07T07:42:15.000Z</published>
    <updated>2016-07-07T08:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;   之前自己的博客在CSDN，已经好久没有更新维护，最近项目告一段落，打算在github上搭建一个技术博客，查了很多资料，选中了hexo，经过一下午的折腾终于成功，第一篇文章就总结下自己搭建hexo过程中遇到的坑吧。&lt;/p&gt;
&lt;p&gt;坑1：hexo不能push到github上&lt;br&gt;    hexo安装资料：&lt;br&gt;    &lt;a href=&quot;http://www.jianshu.com/p/465830080ea9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/465830080ea9&lt;/a&gt;&lt;br&gt;    自己按照上述资料安装，发现死活不能deploy到github，折腾了好久，甚至重新删除安装还是不行，后来发现原因，原来是type参数和值中间必须要有空格，而那个教程中却是没有空格的，并且hexo的官方文档里着重强调必须要注意空格问题。看来是自己不仔细看官方文档的后果。&lt;br&gt;     type: git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repo: https://github.com/leopardpan/leopardpan.github.io.git

branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;坑2：注意站点_config.yml和theme _config.yml&lt;br&gt;    hexo部署成功，自己感觉主题太丑了，想换个主题，换了主题之后不管自己如何设置头像就是不能设置成功，后来发现原因，有的主题换头像实在站点的_config.yml中添加avatar字段和头像地址，而有的头像则是在主题目录下的_config.yml中进行配置，这点一定要注意，仔细查看所用主题的文档说明。&lt;br&gt;坑3: 自己的域名指向github.io不成功&lt;br&gt;     自己在修改过_config.yml之后，会执行hexo c，hexo g,hexo d命令，导致原本在github上的CNAME文件被删除，域名指向不成功。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   之前自己的博客在CSDN，已经好久没有更新维护，最近项目告一段落，打算在github上搭建一个技术博客，查了很多资料，选中了hexo，经过一下午的折腾终于成功，第一篇文章就总结下自己搭建hexo过程中遇到的坑吧。&lt;/p&gt;
&lt;p&gt;坑1：hexo不能push到github
    
    </summary>
    
    
  </entry>
  
</feed>
